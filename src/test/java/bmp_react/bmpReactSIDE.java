package bmp_react;

// Generated by Selenium IDE
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

class bmpReactSIDE {

	private WebDriver driver;
	  private static final String DB_URL = "jdbc:mysql://10.0.1.210:3306/BMPDB";
	    private static final String DB_USER = "bmp";
	    private static final String DB_PASSWORD = "bmp@Tayana123";
	    String result;
	    String failureReason = "";
	    String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
	    String product = "BMP";
	@BeforeClass
	public void setUp() throws InterruptedException {
		// Update with actual geckodriver path
		driver = new FirefoxDriver();
		driver.get("https://10.0.6.137:3000/bmpportal/auth/login");
		driver.manage().window().maximize();
		Thread.sleep(2000);
	}
		 public void Dbconnect(String testName, String result, String failureReason, String timestamp, String product) {
		        try (Connection connection = DriverManager.getConnection(
		                DB_URL + "?autoReconnect=true&sslMode=DISABLED&allowPublicKeyRetrieval=true", 
		                DB_USER, 
		                DB_PASSWORD)) 
		        {
		            // SQL query with the new 'product' column
		            String sqlQuery = "INSERT INTO testng_results (test_name, result, failure_reason, run_timestamp, product) " +
		                              "VALUES (?, ?, ?, ?, ?)";
		            try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
		                // Bind the parameters to the query
		                preparedStatement.setString(1, testName);
		                preparedStatement.setString(2, result);
		                preparedStatement.setString(3, failureReason);
		                preparedStatement.setString(4, timestamp);
		                preparedStatement.setString(5, product);

		                // Execute the SQL query
		                int rowsAffected = preparedStatement.executeUpdate();

		                // Log the result
		                System.out.println("Number of rows affected: " + rowsAffected);
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
	}

	@AfterClass
	public void tearDown() {
		// driver.quit();
	}

	@Test(priority = 1,enabled = true)
	public void contact() throws InterruptedException {

		driver.findElement(By.name("username")).click();
		Thread.sleep(1000);

		driver.findElement(By.name("username")).sendKeys("xavier");
		driver.findElement(By.name("password")).click();

		driver.findElement(By.name("password")).sendKeys("Xavier1234");
		driver.findElement(By.cssSelector(".MuiButton-root")).click();

		// driver.navigate().refresh();

		driver.findElement(By.cssSelector(".css-4cd6fq")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("msgDesc")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("msgDesc")).sendKeys("hello team");
		//driver.findElement(By.id("recipients")).click();
		 WebElement element = driver.findElement(By.id("recipients")); 
		 String fontSizeStr = element.getCssValue("font-size");
	        double fontSize = Double.parseDouble(fontSizeStr.replace("px", ""));

	        // Print actual font size value
	        System.out.println("Font size: " + fontSize);
	        element.click();
		Thread.sleep(1000);
		driver.findElement(By.id("recipients")).sendKeys("9609844444");
		driver.findElement(By.cssSelector(".css-csdob6")).click();
		Thread.sleep(1000);
		driver.findElement(By.cssSelector("body")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("message")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("message")).sendKeys("Hello");
		Thread.sleep(1000);
		// driver.findElement(By.cssSelector(".css-cue3yk-MuiButtonBase-root-MuiButton-root:nth-child(2)")).click();
		// Thread.sleep(1000);
		{
			WebElement element2 = driver.findElement(By.cssSelector(".css-mvba87-MuiButtonBase-root-MuiButton-root"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element2).perform();
		}
		driver.findElement(By.cssSelector(".css-mvba87-MuiButtonBase-root-MuiButton-root")).click();
		Thread.sleep(1000);
		driver.findElement(By.cssSelector("a:nth-child(3) .MuiTypography-root")).click();
		Thread.sleep(1000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0,52)");
	}

	@Test(priority = 2,enabled = false)
	public void Contact_Basic_Case() throws InterruptedException {

	
		// driver.navigate().refresh();
		Thread.sleep(1000);
		// Add assertion before clicking the element
		By contactModuleLocator = By.xpath("//span[contains(.,'Contacts')]");

		if (isElementPresent(contactModuleLocator)) {
			driver.findElement(contactModuleLocator).click();
		} else {
			System.out.println("Contact module not available");
			Assert.fail("Contact module not available"); // Fails the test
		}
	}

	public boolean isElementPresent(By locator) {
		try {
			driver.findElement(locator);
			return true; // Element is found
		} catch (NoSuchElementException e) {
			return false; // Element not found
		}
	}
	
	 @Test(priority = 3, enabled =false)
		public void sending_normal_msg1() throws InterruptedException {
			
			Thread.sleep(2000);
			driver.findElement(By.xpath("/html[1]/body[1]/div[1]/div[1]/div[1]/ul[1]/a[1]/li[1]/div[1]")).click();
			driver.findElement(By.xpath("//input[@id='msgDesc']")).sendKeys("Sample");
			driver.findElement(By.xpath("//input[@id='recipients']")).sendKeys("9609877777");
			driver.findElement(By.xpath("//textarea[@id='message']")).sendKeys("hello normal message");
			Thread.sleep(2000);
			
			WebElement sendButton = driver.findElement(By.xpath("//button[normalize-space()='SEND']"));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);
			Thread.sleep(2000);
		
			sendButton.click();
			Thread.sleep(2000);
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			WebElement confirmationMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(
					By.xpath("//*[contains(text(),'Are you sure? you want to send this message?')]")));
			WebElement confirmSendButton = driver.findElement(By.xpath("//button[normalize-space()='Send']"));
			
			confirmSendButton.click();
			driver.findElement(By.xpath("/html[1]/body[1]/div[1]/div[1]/div[1]/ul[1]/a[1]/li[1]/div[1]")).click();
			Thread.sleep(3000);

			driver.findElement(By.xpath("//*[@id=\"app\"]/div[1]/div/ul/a[3]/li/div")).click();

			Thread.sleep(2000);

			WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
			WebElement refresh = wait1.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"/html[1]/body[1]/div[1]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/button[1]/*[name()='svg'][1]")));
		
			refresh.click();
			Thread.sleep(2000);
			refresh.click();

			Thread.sleep(1000);
			driver.findElement(By.xpath("//tbody/tr[1]/td[5]/div[1]/span[1]")).click();
			driver.findElement(By.xpath("//button[normalize-space()='Message Status']")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("/html[1]/body[1]/div[2]/div[3]/div[1]/h2[1]/div[1]/*[name()='svg'][1]")).click();

			try {
				boolean deliveredDisplayed = driver.findElement(By.xpath("//h6[normalize-space()='Delivered']"))
						.isDisplayed();
			
				if (deliveredDisplayed) {
					System.out.println("sending_normal_msg1 Message is delivered");
				} else {
					System.out.println("'Delivered' element is not present on the page.");
				}

			} catch (NoSuchElementException ex) {
			
				try {
					driver.findElement(By.xpath("//h6[normalize-space()='Delivered']")).isDisplayed();
					System.out.println("The message is'Delivered'");
				} catch (NoSuchElementException e) {
					System.out.println("'Delivered' element is not present on the page.");
				}
				// Check if 'Failed' element is not found
				try {
					driver.findElement(By.xpath("//h6[normalize-space()='Failed']")).isDisplayed();
					System.out.println("The message is 'Failed'");
				} catch (NoSuchElementException e) {
					System.out.println("'Failed' element is not present on the page.");
				}
			}}
	 @AfterMethod
	    public void logTestResult(ITestResult testResult) {
	        // Determine the result of the test
	        if (testResult.getStatus() == ITestResult.SUCCESS) {
	            result = "Passed";
	            failureReason = ""; // No failure reason for successful tests
	        } else if (testResult.getStatus() == ITestResult.FAILURE) {
	            result = "Failed";
	            
	            // Capture the throwable and limit the failure reason to the first two lines
	            Throwable throwable = testResult.getThrowable();
	            if (throwable != null) {
	            	String[] lines = throwable.toString().split("\n");
	            	if (lines.length >= 3) {
	            	    failureReason = String.join("\n", lines[0], lines[1], lines[2]);
	            	} else {
	            	    failureReason = String.join("\n", lines);
	            	}

	            } else {
	                failureReason = "Unknown failure reason.";
	            }
	        } else {
	            result = "Skipped";
	            failureReason = "Test skipped.";
	        }

	        // Log the result to the database
	        Dbconnect(testResult.getMethod().getMethodName(), result, failureReason, timestamp, product);
	    }

	@AfterSuite(enabled = false)
	public void sendEmailReport() {
		// Email configuration
		final String senderEmail = "xavier.t@tayana.in"; // Replace with your email
		final String senderPassword = "packed@45657#";
//	  	String senderPassword = System.getenv("MAIL_PASSWORD"); // in the cmd set MAIL_PASSWORD=your_password restart your eclipse
		final String recipientEmails = "akshay.ps@tayana.in"; // TO recipients
		final String ccEmails = "akshay.ps@tayana.in ,harsha.m@tayana.in "; // CC recipients
		final String subject = "TestNG Emailable Report";
		final String messageBody = "Please find attached the emailable report of Admin GUI automation cases";

		// List of files to be attached
		String[] reportPaths = { System.getProperty("user.dir") + "/test-output/emailable-report.html",
				// System.getProperty("user.dir") + "/test-output/index.html"
				// System.getProperty("user.dir") + "/test-output/passed.png"
		};

		// Set up properties for the email
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.office365.com");
		props.put("mail.smtp.port", "587");

		// Create session with authentication
		Session session = Session.getInstance(props, new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(senderEmail, senderPassword);
			}
		});

		try {
			// Create message
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(senderEmail));
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmails)); // TO recipients
			message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(ccEmails)); // CC recipients
			message.setSubject(subject);

			// Create message body part
			MimeBodyPart messageBodyPart = new MimeBodyPart();
			messageBodyPart.setText(messageBody);

			// Create a multipart for attaching files
			Multipart multipart = new MimeMultipart();
			multipart.addBodyPart(messageBodyPart);

			// Loop through each file and attach
			for (String filePath : reportPaths) {
				MimeBodyPart attachmentPart = new MimeBodyPart();
				attachmentPart.attachFile(new File(filePath));
				multipart.addBodyPart(attachmentPart);
			}

			// Set content
			message.setContent(multipart);

			// Send email
			Transport.send(message);
			System.out.println("Email sent successfully with multiple attachments!");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
